(function () {
    // Utility functions /////////////////////////////////////////////
    function startsWith(s, val) {
        return s.slice(0, val.length) == val;
    }

    function escape(s) {
        var nr = { '\"': '\\"', '\n': '\\n', '\r': '\\r', '\\': '\\\\' };
        return s.replace(/[\"\\\n\r]/g, function (m) { return nr[m]; });
    }

    function isLiteral(str) {
        var ch = str.charCodeAt(0);
        return (ch > 47 && ch < 58) || ch == 39 || ch == 34 || str == 'true' || str == 'false';
    }

    // Promise ///////////////////////////////////////////////////////
    function Promise(arg) {
        var fn,
            next,
            done;

        function Inst() {
            arg !== undefined && this.resolve(arg);
        }

        Inst.prototype = {
            then: function (f) {
                fn = f;
                next = new Promise();
                done && this.resolve(arg);
                return next;
            },

            resolve: function (argument) {
                done = true;
                arg = argument;
                if (!fn) return;

                var result = fn(arg);
                if (result && result.then) {
                    result.then(function (arg) {
                        next.resolve(arg);
                    });
                } else {
                    next.resolve(result);
                }
            }
        }

        return new Inst();
    }

    // CompilerContext ///////////////////////////////////////////////////////
    function CompilerContext() {
        var done = false;
        var promise = new Promise();
        var promiseCount = 0;

        function evaluateDone() {
            if (promiseCount <= 0 && done) {
                promise.resolve();
            }
        }

        function Inst() { };

        Inst.prototype = {
            open: function () {
                return 'out += "';
            },

            close: function () {
                return '";';
            },

            addPromise: function (p) {
                ++promiseCount;
                p.then(function () {
                    --promiseCount;
                    evaluateDone();
                });
            },

            wait: function () {
                done = true;
                evaluateDone();
                return promise;
            },

            scopedExpr: scopedExpr
        };

        return new Inst();
    }

    var plugin = {},
        filter = {},
        _views = {},
        _cache = {},
        oktmpl = {
            filter: filter,
            plugin: plugin,
            promise: Promise,
            cache: _cache,
            htmlEncode: function (str) {
                var encodeHTMLRules = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': '&#34;', "'": '&#39;', "/": '&#47;' },
                    matchHTML = /&(?!#?\w+;)|<|>|"|'|\//g;

                return str && str.replace ? str.replace(matchHTML, function (m) { return encodeHTMLRules[m] || m; }) : str;
            },

            clone: function (obj) {
                function c() { };
                c.prototype = obj;
                return new c;
            },

            render: function (name, model) {
                return this.compiledView(name).then(function (view) {
                    return view(model);
                });
            },

            compiledView: function (name) {
                var compiledView = _cache[name];
                if (compiledView) {
                    return new Promise(compiledView);
                }

                return this.fetchView(name).then(function (view) {
                    return compile(view);
                }).then(function (view) {
                    return (_cache[name] = view);
                });
            },

            addView: function (name, value) {
                if (typeof (name) === 'string') _views[name] = value;
                else for (var n in name) _views[n] = name[n];
            },

            fetchView: function (name) {
                var view = _views[name];
                delete _views[name];
                return new Promise(view);
            }
        };

    function readVariable(str) {
        function genFn(arr, suffix) {
            var s = '(function (x) { var o = x;',
                token;

            while (token = arr.shift()) {
                if (isLiteral(token)) return token;
                if (token == ']') break;

                if (token == '[') {
                    token = genFn(arr, '(x)');
                    arr[0] == ']' && arr.shift();
                } else {
                    token = '"' + token + '"';
                }

                s += 'o && (o = o[' + token + ']);'
            }

            return s + 'return o; })' + (suffix || '');
        }

        return genFn(str.match(/\[|\]|\"[^"\\]*(?:\\.[^"\\]*)*\"|\'[^'\\]*(?:\\.[^'\\]*)*\'|[\$\w]+/g));
    }

    function evalStr(expr, objName) {
        objName = objName || 'o';
        var nonLitReg = /\"[^"\\]*(?:\\.[^"\\]*)*\"|\'[^'\\]*(?:\\.[^'\\]*)*\'|[a-zA-Z\$]+([\w\$\.]*(\[.*\])*)*/g;
        return expr.replace(nonLitReg, function (token) {
            if (isLiteral(token)) return token;
            if (token == 'this') return objName;
            return readVariable(token) + '(' + objName + ')';
        });
    }

    function scopedExpr(expr, objName) {
        var matches = expr.split('::');
        var val = evalStr(matches.shift());

        function filterDat(i) {
            if (i < 0) return val;
            var match = 'oktmpl.filter.' + matches[i];

            return match.replace(/\(.*\)/, function (s) {
                return '(' + evalStr(s.substring(1, s.length - 1)) + ')';
            }).replace(/\(|$/, function (m) {
                return '(' + filterDat(i - 1) + (m == '(' ? ',' : ')');
            });
        }

        return filterDat(matches.length - 1);
    }

    function interpolate(expr, ctx) {
        var reg = (/{\{[^\}]+\}\}|\$\$[\w\-]+.+/g),
            s = '',
            i = 0,
            match;

        while (match = reg.exec(expr)) {
            var instruction = match[0];
            s += escape(expr.substring(i, match.index));
            if (startsWith(instruction, '{{')) {
                var isRaw = startsWith(instruction, '{{raw:'),
                    val = scopedExpr(isRaw ? instruction.substring('{{raw:'.length, instruction.length - 2) : instruction.substring(2, instruction.length - 2));

                if (!isRaw) val = 'oktmpl.htmlEncode(' + val + ')';

                s += '" + (' + val + ') + "';
            } else {
                var pluginName = instruction.match(/\$\$\S+/)[0];
                s += plugin[pluginName](instruction, ctx);
            }
            i = reg.lastIndex;
        }

        return s + escape(expr.substring(i));
    }

    function compile(tmpl) {
        var ctx = new CompilerContext();

        tmpl = '(function(o, c) { var out = "' + interpolate(tmpl, ctx) + '"; return out; })';

        return ctx.wait().then(function () {
            return eval(tmpl);
        });
    }

    // Plugins ///////////////////////////////////////////////////////////////////////
    plugin['$$if'] = function (expr, ctx) {
        return ctx.close() + 'if (' + ctx.scopedExpr(expr.substring('$$if'.length)) + ') { ' + ctx.open();
    }

    plugin['$$else-if'] = function (expr, ctx) {
        return ctx.close() + '} else if (' + ctx.scopedExpr(expr.substring('$$else-if'.length)) + ') { ' + ctx.open();
    }

    plugin['$$else'] = function (expr, ctx) {
        return ctx.close() + '} else {' + ctx.open();
    }

    plugin['$$end-if'] = function (expr, ctx) {
        return ctx.close() + '}' + ctx.open();
    }

    plugin['$$for'] = function (expr, ctx) {
        var regIn = /\sin\s/,
            match = regIn.exec(expr),
            prefix = expr.substring('$$for'.length, match.index),
            split = prefix.match(/[\w\$\d]+/g),
            varName = split[0],
            indexName = split.length > 1 ? split[1] : '$index',
            arrayGetter = scopedExpr(expr.substring(match.index + match[0].length));

        return ctx.close() +
            '(function(o) {' +
                'var obj = o, arr = ' + arrayGetter + ';' +
                'if (!arr) return "";' +
                'for (var i=0; i<arr.length; ++i) {' +
                    'o = oktmpl.clone(obj);' +
                    'o["' + varName + '"]=arr[i];' +
                    'o["' + indexName + '"]=i;' +
                    ctx.open();
    }

    plugin['$$end-for'] = function (expr, ctx) {
        return ctx.close() + '} })(o);' + ctx.open();
    }

    plugin['$$partial'] = function (expr, ctx, fn) {
        var viewNameMatch = (/(["'])(?:\\?.)*?\1/).exec(expr),
            viewName = viewNameMatch[0];

        viewName = viewName.substring(1, viewName.length - 1);
        var paramsStr = expr.substring(viewNameMatch.index + viewName.length + 3).replace(/\s/g, '');
        var modelStr = paramsStr.indexOf(':') >= 0 ? '{' + paramsStr.replace(/\:\s*[a-zA-Z\$]+([\w\$\.]*(\[.*\])*)*/g, function (match) {
            return ':' + scopedExpr(match.substring(1));
        }) + '}' : paramsStr.length ? scopedExpr(paramsStr) : 'o';

        ctx.addPromise(oktmpl.compiledView(viewName));

        return fn ? fn(viewName, modelStr) : '" + oktmpl.cache["' + viewName + '"](' + modelStr + ') + "';
    }

    plugin['$$master'] = function (expr, ctx) {
        return plugin['$$partial'](expr, ctx, function (viewName, modelStr) {
            return '" + oktmpl.cache["' + viewName + '"](' + modelStr + ', function (o) { var out = "';
        });
    }

    plugin['$$master-body'] = function (expr, ctx) {
        return '" + (c ? c(o) : "") + "';
    }

    plugin['$$end-master'] = function (expr, ctx) {
        return '"; return out; }) + "';
    }

    // Filters ///////////////////////////////////////////////////////////////////////
    function conditionalAttribute(html) {
        return function (val) {
            return val ? { toString: function () { return html; } } : '';
        }
    }

    oktmpl.filter.checked = conditionalAttribute('checked="checked"');
    oktmpl.filter.selected = conditionalAttribute('selected="selected"');
    oktmpl.filter.disabled = conditionalAttribute('disabled="disabled"');

    // Exports ///////////////////////////////////////////////////////////////////////
    window.oktmpl = oktmpl;
})();